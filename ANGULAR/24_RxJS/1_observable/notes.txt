Observable :
   * Observable emits data only when there is a subscriber.
   * observer acts as delivery boy.

   * It is unicast:
       meaning each subscriber gets an independent execution of the observable.
       Each subscriber of an Observable receives its own independent stream of values emitted by the Observable.
   * Observables are often used for handling asynchronous data streams, such as HTTP    
     requests or user input events.
   * Here we can't emit values from outside.

   * Creating an Observable :
      custom_observable:Observable<number> = new Observable((observer) => {
         observer.next(2);
         observer.next(3);
         observer.next(4);
         observer.next(5);
         observer.next(6);
         observer.error(new Error('Something went wrong'));
         observer.complete();
      });

   * Sucscribing to an Observable :
       sub:Subscription = custom_observable.subscribe(
        (val)=>{console.log(val)},
        (err)=>{console.log(err.message)},
        ()=>{console.log("Completed")}
       )

   * UnSubscribing to an Observable :
      sub.unsubscribe();
   
   * of() :
     It takes values and creates an observable.
     Example :
            custom_observable:Observable<number> = of(2,4,6,8) as Observable<number>;
   
   * from() :
     It takes sequence and creates an observable.
     Example : 
             custom_observable:Observable<number> = from([1,2,3,4]) as Observable<number>;
          
   * pipe()
     We can use pipe to transform the data before subscribing.
     Example 1: Using map

        .service 
        students_observable: Observable<any> = new Observable((observer) => {
          observer.next([
              {
                id: 1,
                name: 'john',
                gender: 'male',
              },
              {
                id: 2,
                name: 'Alexa',
                gender: 'female',
              },
              {
                id: 3,
                name: 'Monica',
                gender: 'female',
              },
              {
                id: 4,
                name: 'suzain',
                gender: 'female',
              },
            ]);
         });

  .component
      export class AppComponent {
      studentsList = [];

      constructor(private testService: TestService) {}

      ngOnInit() {
        this.testService.students_observable
          .pipe(
            map((data) => {
              for (let student of data) {
                student['age'] = 20;
              }
              return data;
            })
          )
          .subscribe((students) => (this.studentsList = students));
      }
    }

----------

Example 2: Using Map and Filter
   .service
    obs:Observable<number> = from([1,2,3,4]) as Observable<number>
   
   .component
    this.testService.obs
      .pipe(
        map((num) => num * 3),
        filter((num) => num % 2 == 0)
      )
      .subscribe((res) => console.log(res));

--------------------------------------------------------------

Output of Example project :

Subscriber-1 :  1                 Click Start Subscriber-1
Subscriber-1 :  2
Subscriber-1 :  3
Subscriber-1 :  4
Subscriber-1 :  5
Subscriber-1 :  6
Subscriber-2 :  7                 Click Start Subscriber-2
Subscriber-1 :  8
Subscriber-2 :  9
Subscriber-1 :  10
Subscriber-2 :  11
Subscriber-1 :  12
Subscriber-2 :  13


So here both subscriber-1 and subscriber-2 gets separate execution, 
so when i start subscriber-2 that time it will get the current value after every "2" seconds.