Creating custom hook :
* Custom hook name should start with keyword "use".
* It's good practice to keep all our custom hooks inside hooks.
* Inside custom hook we can create state variable's and we can use useEffect.
* Whenever any state variable changes in our custom hook then react will re-render our component.


Example 1:
useFetchData.js
import { useEffect, useState } from "react";

const useFetchData = (url) => {
  const [isLoading, setIsLoading] = useState(false);
  const [data, setData] = useState([]);
  const [isError, setIsError] = useState(false);
  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true);
      setIsError(false);
      try {
        const response = await fetch(url);
        const data = await response.json();
        await delay(2000);
        setData(data);
      } catch (error) {
        setIsError(error.message);
      } finally {
        setIsLoading(false);
      }
    };
    fetchData();
  }, [url]);
  return { isLoading, data, isError };
};

const delay = (duration) => {
  return new Promise((resolve) => {
    setTimeout(resolve, duration);
  });
};
export default useFetchData;

Card.jsx
const {isLoading, data, isError} = useFetchData();

---------------------

Example 2:
Create hook to check online offline status

import { useEffect, useState } from "react";

const useStatus = () => {
  const [status, setStatus] = useState(true);
  useEffect(() => {
    window.addEventListener("online", () => setStatus(true));
    window.addEventListener("offline", () => setStatus(false));
  }, []);
  return status;
};
export default useStatus;

