import { useFormikContext } from "formik";
import React, { useState, createContext, useContext } from "react";

const Formik = ({
  initialValues,
  validationSchema,
  onSubmit,
  validateOnChange,
  validateOnBlur,
  children,
}) => {
  const FormikContext = createContext(null);

  const [values, setValues] = useState(initialValues);
  const [errors, setErrors] = useState({});
  const [touched, setTouched] = useState({});
  const [isSubmitting, setSubmitting] = useState(false);

  // Handle input changes
  const handleChange = (event) => {
    const { name, value } = event.target;
    setValues({
      ...values,
      [name]: value,
    });
    // VALIDATION PROCESS IF VALIDATE_ON_CHANGE IS TRUE
  };

  // Handle input blur
  const handleBlur = (event) => {
    const { name } = event.target;
    setTouched((prevTouched) => ({
      ...prevTouched,
      [name]: true,
    }));
    // VALIDATION PROCESS
  };

  // Handle input validation
  const validateField = (name, value) => {
    // Simplified validation logic using Yup
    if (validationSchema) {
      try {
        validationSchema.validateSyncAt(name, { [name]: value });
        setErrors((prevErrors) => ({
          ...prevErrors,
          [name]: undefined,
        }));
      } catch (error) {
        setErrors((prevErrors) => ({
          ...prevErrors,
          [name]: error.message,
        }));
      }
    }
  };

  // set field value
  const setFieldValue = (name, value) => {
    setValues((prevValues) => ({
      ...prevValues,
      [name]: value,
    }));
    validateField(name, value);
  };

  // Handle form submission
  const handleSubmit = (event) => {
    event.preventDefault();
    setSubmitting(true);

    // Call the onSubmit function passed as a prop
    onSubmit(values, { setSubmitting });
  };

  // useFormikContext Function
  const useFormikContext = () => {
    return useContext(FormikContext);
  };

  // Context values object
  const contextValue = {
    values,
    errors,
    touched,
    isSubmitting,
    setFieldValue,
    handleChange,
    handleBlur,
  };

  return (
    <FormikContext.Provider value={contextValue}>
      <form onSubmit={handleSubmit}>
        {typeof children === "function" ? children(contextValue) : children}
      </form>
    </FormikContext.Provider>
  );
};

export default Formik;
export { useFormikContext };
