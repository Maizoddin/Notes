application.properties :

# Schema management
spring.jpa.hibernate.ddl-auto=update     # Alternatives: create, create-drop, validate

# Logging
logging.level.org.hibernate.SQL=debug
logging.level.org.hibernate.orm.jdbc.bind=trace
logging.level.root=WARN

# Disable Spring banner
spring.main.banner-mode=off

--------------------------------------------------------------------------------------------------------------------

Explanation :

// create : Drops existing tables and creates new ones every time the application starts. All data will be lost.
// update: Updates schema without dropping tables and can add new columns but can't alter existing columns schema.

// logging.level.org.hibernate.SQL = debug
✅ What It Does:
This enables logging of SQL statements generated by Hibernate at the DEBUG level.
✅ Example:
If you're performing a findAll() query, Hibernate will log:
SELECT * FROM student;


// logging.level.org.hibernate.orm.jdbc.bind = trace
✅ What It Does:
This logs the actual values of the parameters passed in SQL queries at the TRACE level.
✅ Example:
If you run:
Query query = entityManager.createQuery("SELECT s FROM Student s WHERE s.firstName = :name");
query.setParameter("name", "John");

You will see logs like:
SELECT s FROM Student s WHERE s.firstName = ?
binding parameter [1] as [VARCHAR] - [John]


