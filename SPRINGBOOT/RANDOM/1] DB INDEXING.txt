INDEXING :
📘 What is Indexing?
An index in a database is similar to an index in a book – it helps you find data faster, without scanning the entire table.
Instead of scanning every row (like reading every page of a book), the DB uses the index to jump directly to the right rows.

🔍 Why Use Indexes?
* Without an index:
  A query like SELECT * FROM customers WHERE name = 'Alice' has to scan every row → Full Table Scan → O(n) time.

* With an index:
  MySQL can use a B+ Tree to search efficiently → O(log n) time.

COMMAND : CREATE INDEX idx_customer_account_no ON customers(account_no)
IF WE DON'T PROVIDE INDEX THEN BYDEFAULT IT CREATES ON PRIMARY_KEY

* MySQL uses B+ Trees to implement most indexes.
  Internal nodes store keys for navigation.
  Leaf nodes store either:
   A pointer to the actual row (if it's a secondary index).

EXAMPLE :
25 BANK CUSTOMERS DATA

DISK SIZE = 4KB
PAGE SIZE = 16KB = 4 DISKS


* Each page holds 5 records
* Branch nodes hold 3 keys
* Leaf pages are doubly linked

                              [ROOT PAGE #101]
                             ┌──────────────────┐
                             │ Keys: 10, 20     │
                             ├───────┬──────┬───┤
                             │ Ptr201│Ptr301│Ptr│
                             └───┬───┴──┬───┴─┬─┘
                                 │      │     │
               ┌─────────────────┘      │     └────────────────────┐
               │                        │                          │
     [BRANCH PAGE #201]        [BRANCH PAGE #301]         [BRANCH PAGE #401]
     ┌──────────────────┐      ┌──────────────────┐       ┌──────────────────┐
     │ Keys: 4, 7       │      │ Keys: 14, 17     │       │ Keys: 24         │
     ├─────┬─────┬──────┤      ├─────┬─────┬──────┤       ├─────┬─────┬──────┤
     │PtrL1│PtrL2│PtrL3 │      │PtrL4│PtrL5│PtrL6 │       │PtrL7│PtrL8│      │
     └──┬──┴──┬──┴──┬───┘      └──┬──┴──┬──┴──┬───┘       └──┬──┴──┬──┴──────┘
        │     │     │             │     │     │              │     │
┌───────▼─┐ ┌─▼─────┐ ┌─────────┐ │ ┌───▼──┐ ┌▼─────┐ ┌──────▼─┐ ┌─▼──────┐
│LEAF #501│ │LEAF #502│ │LEAF #503│ │LEAF #504│ │LEAF #505│ │LEAF #506│ │LEAF #507│ 
├─────────┤ ├─────────┤ ├─────────┤ ├─────────┤ ├─────────┤ ├─────────┤ ├─────────┤ 
│ID:1     │ │ID:4     │ │ID:7     │ │ID:10    │ │ID:14    │ │ID:17    │ │ID:21    │ 
│ID:2     │ │ID:5     │ │ID:8     │ │ID:11    │ │ID:15    │ │ID:18    │ │ID:22    │ 
│ID:3     │ │ID:6     │ │ID:9     │ │ID:12    │ │ID:16    │ │ID:19    │ │ID:23    │ 
│         │ │         │ │         │ │ID:13    │ │         │ │ID:20    │ │ID:24    │ 
│         │ │         │ │         │ │         │ │         │ │         │ │ID:25    │ 
└───┬─────┘ └───┬─────┘ └───┬─────┘ └───┬─────┘ └───┬─────┘ └───┬─────┘ └─────────┘ 
    └───────────┐           ├───────────┴───────────┐           │
                └───────────┘                       └───────────┘
                 Leaf Page Links (Sequential Order)


Page Content Visualization
1. Root Page (#101):
┌───────────────────────────┐
│ PAGE TYPE: INDEX (ROOT)   │
│ PAGE ID: 101              │
├───────┬─────────┬─────────┤
│ Key 1 │ Key 2   │ Key 3   │
│ 10    │ 20      │ NULL    │
├───────┼─────────┼─────────┤
│ Ptr1  │ Ptr2    │ Ptr3    │
│ 201   │ 301     │ 401     │
└───────┴─────────┴─────────┘

2. Branch Page (#201):
┌───────────────────────────┐
│ PAGE TYPE: INDEX (BRANCH) │
│ PAGE ID: 201              │
├───────┬─────────┬─────────┤
│ Key 1 │ Key 2   │ Key 3   │
│ 4     │ 7       │ NULL    │
├───────┼─────────┼─────────┤
│ Ptr1  │ Ptr2    │ Ptr3    │
│ 501   │ 502     │ 503     │
└───────┴─────────┴─────────┘

3. Leaf Page (#501):
┌───────────────────────────────────────┐
│ PAGE TYPE: LEAF (DATA)                │
│ PAGE ID: 501                          │
│ NEXT: 502   PREV: NULL                │
├─────┬───────────┬─────────┬───────────┤
│ ID  │ Name      │ Balance │ Branch ID │
├─────┼───────────┼─────────┼───────────┤
│ 1   │ Alice     │ 1000.00 │ 1         │
│ 2   │ Bob       │ 2000.00 │ 2         │
│ 3   │ Charlie   │ 1500.00 │ 1         │
├─────┴───────────┴─────────┴───────────┤
│ FREE SPACE: 45%                       │
└───────────────────────────────────────┘


4. Leaf Page (#505):
┌───────────────────────────────────────┐
│ PAGE TYPE: LEAF (DATA)                │
│ PAGE ID: 505                          │
│ NEXT: 506   PREV: 504                 │
├─────┬───────────┬─────────┬───────────┤
│ ID  │ Name      │ Balance │ Branch ID │
├─────┼───────────┼─────────┼───────────┤
│ 14  │ Nancy     │ 2600.00 │ 3         │
│ 15  │ Oscar     │ 2700.00 │ 1         │
│ 16  │ Peter     │ 2800.00 │ 2         │
├─────┴───────────┴─────────┴───────────┤
│ FREE SPACE: 55%                       │
└───────────────────────────────────────┘



NOTE : IN B+ TREES TIME COMPLEXITY BECOMES O(log n)


* Indexing Rules & Behavior
✅ MySQL Automatically Creates:
   Primary key index (BTREE) by default.

   Any field with UNIQUE constraint also gets indexed.

❗ If You Search by a Non-Indexed Field:
e.g., You created index on account_no but you search by balance.

MySQL cannot use B+ tree → does a full table scan:
Loads each 16KB page from disk.
Scans row by row in RAM.





